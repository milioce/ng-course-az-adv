diff --git a/ini/angular.json b/ini/angular.json
index 323d201..03a59e3 100644
--- a/ini/angular.json
+++ b/ini/angular.json
@@ -730,6 +730,250 @@
           }
         }
       }
+    },
+    "services": {
+      "projectType": "application",
+      "schematics": {
+        "@schematics/angular:component": {
+          "inlineTemplate": true,
+          "inlineStyle": true,
+          "style": "scss"
+        }
+      },
+      "root": "projects/services",
+      "sourceRoot": "projects/services/src",
+      "prefix": "app",
+      "architect": {
+        "build": {
+          "builder": "@angular-devkit/build-angular:browser",
+          "options": {
+            "outputPath": "dist/services",
+            "index": "projects/services/src/index.html",
+            "main": "projects/services/src/main.ts",
+            "polyfills": "projects/services/src/polyfills.ts",
+            "tsConfig": "projects/services/tsconfig.app.json",
+            "aot": true,
+            "assets": [
+              "projects/services/src/favicon.ico",
+              "projects/services/src/assets"
+            ],
+            "styles": [
+              "projects/services/src/styles.scss"
+            ],
+            "scripts": []
+          },
+          "configurations": {
+            "production": {
+              "fileReplacements": [
+                {
+                  "replace": "projects/services/src/environments/environment.ts",
+                  "with": "projects/services/src/environments/environment.prod.ts"
+                }
+              ],
+              "optimization": true,
+              "outputHashing": "all",
+              "sourceMap": false,
+              "namedChunks": false,
+              "extractLicenses": true,
+              "vendorChunk": false,
+              "buildOptimizer": true,
+              "budgets": [
+                {
+                  "type": "initial",
+                  "maximumWarning": "2mb",
+                  "maximumError": "5mb"
+                },
+                {
+                  "type": "anyComponentStyle",
+                  "maximumWarning": "6kb",
+                  "maximumError": "10kb"
+                }
+              ]
+            }
+          }
+        },
+        "serve": {
+          "builder": "@angular-devkit/build-angular:dev-server",
+          "options": {
+            "browserTarget": "services:build"
+          },
+          "configurations": {
+            "production": {
+              "browserTarget": "services:build:production"
+            }
+          }
+        },
+        "extract-i18n": {
+          "builder": "@angular-devkit/build-angular:extract-i18n",
+          "options": {
+            "browserTarget": "services:build"
+          }
+        },
+        "test": {
+          "builder": "@angular-devkit/build-angular:karma",
+          "options": {
+            "main": "projects/services/src/test.ts",
+            "polyfills": "projects/services/src/polyfills.ts",
+            "tsConfig": "projects/services/tsconfig.spec.json",
+            "karmaConfig": "projects/services/karma.conf.js",
+            "assets": [
+              "projects/services/src/favicon.ico",
+              "projects/services/src/assets"
+            ],
+            "styles": [
+              "projects/services/src/styles.scss"
+            ],
+            "scripts": []
+          }
+        },
+        "lint": {
+          "builder": "@angular-devkit/build-angular:tslint",
+          "options": {
+            "tsConfig": [
+              "projects/services/tsconfig.app.json",
+              "projects/services/tsconfig.spec.json",
+              "projects/services/e2e/tsconfig.json"
+            ],
+            "exclude": [
+              "**/node_modules/**"
+            ]
+          }
+        },
+        "e2e": {
+          "builder": "@angular-devkit/build-angular:protractor",
+          "options": {
+            "protractorConfig": "projects/services/e2e/protractor.conf.js",
+            "devServerTarget": "services:serve"
+          },
+          "configurations": {
+            "production": {
+              "devServerTarget": "services:serve:production"
+            }
+          }
+        }
+      }
+    },
+    "observables": {
+      "projectType": "application",
+      "schematics": {
+        "@schematics/angular:component": {
+          "inlineTemplate": true,
+          "inlineStyle": true,
+          "style": "scss"
+        }
+      },
+      "root": "projects/observables",
+      "sourceRoot": "projects/observables/src",
+      "prefix": "app",
+      "architect": {
+        "build": {
+          "builder": "@angular-devkit/build-angular:browser",
+          "options": {
+            "outputPath": "dist/observables",
+            "index": "projects/observables/src/index.html",
+            "main": "projects/observables/src/main.ts",
+            "polyfills": "projects/observables/src/polyfills.ts",
+            "tsConfig": "projects/observables/tsconfig.app.json",
+            "aot": true,
+            "assets": [
+              "projects/observables/src/favicon.ico",
+              "projects/observables/src/assets"
+            ],
+            "styles": [
+              "projects/observables/src/styles.scss"
+            ],
+            "scripts": []
+          },
+          "configurations": {
+            "production": {
+              "fileReplacements": [
+                {
+                  "replace": "projects/observables/src/environments/environment.ts",
+                  "with": "projects/observables/src/environments/environment.prod.ts"
+                }
+              ],
+              "optimization": true,
+              "outputHashing": "all",
+              "sourceMap": false,
+              "namedChunks": false,
+              "extractLicenses": true,
+              "vendorChunk": false,
+              "buildOptimizer": true,
+              "budgets": [
+                {
+                  "type": "initial",
+                  "maximumWarning": "2mb",
+                  "maximumError": "5mb"
+                },
+                {
+                  "type": "anyComponentStyle",
+                  "maximumWarning": "6kb",
+                  "maximumError": "10kb"
+                }
+              ]
+            }
+          }
+        },
+        "serve": {
+          "builder": "@angular-devkit/build-angular:dev-server",
+          "options": {
+            "browserTarget": "observables:build"
+          },
+          "configurations": {
+            "production": {
+              "browserTarget": "observables:build:production"
+            }
+          }
+        },
+        "extract-i18n": {
+          "builder": "@angular-devkit/build-angular:extract-i18n",
+          "options": {
+            "browserTarget": "observables:build"
+          }
+        },
+        "test": {
+          "builder": "@angular-devkit/build-angular:karma",
+          "options": {
+            "main": "projects/observables/src/test.ts",
+            "polyfills": "projects/observables/src/polyfills.ts",
+            "tsConfig": "projects/observables/tsconfig.spec.json",
+            "karmaConfig": "projects/observables/karma.conf.js",
+            "assets": [
+              "projects/observables/src/favicon.ico",
+              "projects/observables/src/assets"
+            ],
+            "styles": [
+              "projects/observables/src/styles.scss"
+            ],
+            "scripts": []
+          }
+        },
+        "lint": {
+          "builder": "@angular-devkit/build-angular:tslint",
+          "options": {
+            "tsConfig": [
+              "projects/observables/tsconfig.app.json",
+              "projects/observables/tsconfig.spec.json",
+              "projects/observables/e2e/tsconfig.json"
+            ],
+            "exclude": [
+              "**/node_modules/**"
+            ]
+          }
+        },
+        "e2e": {
+          "builder": "@angular-devkit/build-angular:protractor",
+          "options": {
+            "protractorConfig": "projects/observables/e2e/protractor.conf.js",
+            "devServerTarget": "observables:serve"
+          },
+          "configurations": {
+            "production": {
+              "devServerTarget": "observables:serve:production"
+            }
+          }
+        }
+      }
     }
   },
   "defaultProject": "components"
diff --git a/ini/mock/db.json b/ini/mock/db.json
index 779f17a..fe0bf78 100644
--- a/ini/mock/db.json
+++ b/ini/mock/db.json
@@ -13,14 +13,12 @@
     { "id": 7, "price": 2.25, "name": "Cable USB 2.0" },
     { "id": 8, "price": 28, "name": "Pulsera de actividad" }
   ],
-
   "coupons": [
     { "id": "A123", "expired": false },
     { "id": "A987", "expired": true },
     { "id": "B123", "expired": false },
     { "id": "C123", "expired": false }
   ],
-
   "messages": [
     {
       "id": 1,
@@ -54,5 +52,49 @@
       "full": "Full message from Laurence Murray",
       "timestamp": 1487845787719
     }
+  ],
+  "pizzas": [
+    { "id": "1", "name": "Carbonara", "price": 10 },
+    { "id": "2", "name": "Napolitana", "price": 12 },
+    { "id": "3", "name": "4 estaciones", "price": 12 }
+  ],
+  "sides": [
+    { "id": "1", "name": "Alitas de pollo", "price": 6 },
+    { "id": "2", "name": "Patatas fritas", "price": 5 },
+    { "id": "3", "name": "Ensalada", "price": 5 }
+  ],
+  "drinks": [
+    { "id": "1", "name": "Coca cola", "price": 1.50 },
+    { "id": "2", "name": "Limonada", "price": 1.50 },
+    { "id": "3", "name": "Agua", "price": 1 }
+  ],
+  "countries": [
+    { "id": "de", "name": "Alemania" },
+    { "id": "at", "name": "Austria" },
+    { "id": "bg", "name": "Bulgaria" },
+    { "id": "be", "name": "BÃ©lgica" },
+    { "id": "cz", "name": "Chequia" },
+    { "id": "cy", "name": "Chipre" },
+    { "id": "hr", "name": "Croacia" },
+    { "id": "dk", "name": "Dinamarca" },
+    { "id": "sk", "name": "Eslovaquia" },
+    { "id": "si", "name": "Eslovenia" },
+    { "id": "es", "name": "EspaÃ±a" },
+    { "id": "ee", "name": "Estonia" },
+    { "id": "fi", "name": "Finlandia" },
+    { "id": "fr", "name": "Francia" },
+    { "id": "gr", "name": "Grecia" },
+    { "id": "hu", "name": "HungrÃ­a" },
+    { "id": "ie", "name": "Irlanda" },
+    { "id": "it", "name": "Italia" },
+    { "id": "lv", "name": "Letonia" },
+    { "id": "lt", "name": "Lituania" },
+    { "id": "lu", "name": "Luxemburgo" },
+    { "id": "mt", "name": "Malta" },
+    { "id": "nl", "name": "PaÃ­ses Bajos" },
+    { "id": "pl", "name": "Polonia" },
+    { "id": "pt", "name": "Portugal" },
+    { "id": "ro", "name": "RumanÃ­a" },
+    { "id": "se", "name": "Suecia" }
   ]
 }
diff --git a/ini/package-lock.json b/ini/package-lock.json
index 48a5314..bfe93b8 100644
--- a/ini/package-lock.json
+++ b/ini/package-lock.json
@@ -1630,22 +1630,6 @@
         "webpack-sources": "2.2.0"
       }
     },
-    "@ngx-translate/core": {
-      "version": "13.0.0",
-      "resolved": "https://registry.npmjs.org/@ngx-translate/core/-/core-13.0.0.tgz",
-      "integrity": "sha512-+tzEp8wlqEnw0Gc7jtVRAJ6RteUjXw6JJR4O65KlnxOmJrCGPI0xjV/lKRnQeU0w4i96PQs/jtpL921Wrb7PWg==",
-      "requires": {
-        "tslib": "^2.0.0"
-      }
-    },
-    "@ngx-translate/http-loader": {
-      "version": "6.0.0",
-      "resolved": "https://registry.npmjs.org/@ngx-translate/http-loader/-/http-loader-6.0.0.tgz",
-      "integrity": "sha512-LCekn6qCbeXWlhESCxU1rAbZz33WzDG0lI7Ig0pYC1o5YxJWrkU9y3Y4tNi+jakQ7R6YhTR2D3ox6APxDtA0wA==",
-      "requires": {
-        "tslib": "^2.0.0"
-      }
-    },
     "@nodelib/fs.scandir": {
       "version": "2.1.5",
       "resolved": "https://registry.npmjs.org/@nodelib/fs.scandir/-/fs.scandir-2.1.5.tgz",
diff --git a/ini/package.json b/ini/package.json
index 5f0d3b2..e7d232f 100644
--- a/ini/package.json
+++ b/ini/package.json
@@ -11,8 +11,10 @@
     "start:pipes": "ng serve --project pipes",
     "start:forms": "concurrently \"npm run mock:server\" \"npm run serve-forms\"",
     "start:routing": "concurrently \"npm run mock:server\" \"npm run serve-routing\"",
+    "start:services": "concurrently \"npm run mock:server\" \"npm run serve-services\"",
     "serve-forms": "ng serve --project forms --proxy-config proxy.conf.json",
     "serve-routing": "ng serve --project routing --proxy-config proxy.conf.json",
+    "serve-services": "ng serve --project services --proxy-config proxy.conf.json",
     "build": "ng build",
     "test": "ng test",
     "lint": "ng lint",
@@ -28,8 +30,6 @@
     "@angular/platform-browser": "~11.2.7",
     "@angular/platform-browser-dynamic": "~11.2.7",
     "@angular/router": "~11.2.7",
-    "@ngx-translate/core": "^13.0.0",
-    "@ngx-translate/http-loader": "^6.0.0",
     "rxjs": "~6.6.0",
     "tslib": "^2.0.0",
     "zone.js": "~0.11.3"
diff --git a/ini/projects/routing/src/app/app.component.scss b/ini/projects/routing/src/app/app.component.scss
index 1bbb9cc..4ab5e7a 100644
--- a/ini/projects/routing/src/app/app.component.scss
+++ b/ini/projects/routing/src/app/app.component.scss
@@ -44,11 +44,3 @@ header {
   align-items: center;
   padding-left: 10px;
 }
-
-.mail {
-  flex: 0 0 40%;
-  padding: 20px 0;
-  overflow: hidden;
-  border-right: 1px solid rgba(0, 0, 0, 0.1);
-  overflow-y: auto;
-}
diff --git a/ini/projects/routing/src/app/app.component.ts b/ini/projects/routing/src/app/app.component.ts
index 3cfeaea..97c2778 100644
--- a/ini/projects/routing/src/app/app.component.ts
+++ b/ini/projects/routing/src/app/app.component.ts
@@ -21,9 +21,7 @@ import { Component, OnInit } from '@angular/core';
             Trash
           </a>
         </nav>
-        <div class="mail">
-          <router-outlet></router-outlet>
-        </div>
+        <app-mail></app-mail>
       </div>
     </div>
   `,
diff --git a/ini/projects/routing/src/app/app.module.ts b/ini/projects/routing/src/app/app.module.ts
index dbe9f5d..0c45a97 100644
--- a/ini/projects/routing/src/app/app.module.ts
+++ b/ini/projects/routing/src/app/app.module.ts
@@ -1,5 +1,6 @@
 import { NgModule } from '@angular/core';
 import { BrowserModule } from '@angular/platform-browser';
+import { HttpClientModule } from '@angular/common/http';
 
 import { AppRoutingModule } from './app-routing.module';
 import { AppComponent } from './app.component';
@@ -11,6 +12,7 @@ import { MailModule } from './mail/mail.module';
   ],
   imports: [
     BrowserModule,
+    HttpClientModule,
     AppRoutingModule,
     MailModule
   ],
diff --git a/ini/projects/routing/src/app/auth/auth.service.ts b/ini/projects/routing/src/app/auth/auth.service.ts
new file mode 100644
index 0000000..5d299db
--- /dev/null
+++ b/ini/projects/routing/src/app/auth/auth.service.ts
@@ -0,0 +1,17 @@
+import { Injectable } from '@angular/core';
+import { of } from 'rxjs';
+
+@Injectable({providedIn: 'root'})
+export class AuthService {
+  user = { isAdmin: true };
+
+  checkPermissions() {
+    return of(this.user.isAdmin);
+  }
+
+  isLoggedIn() {
+    return of(true);
+  }
+
+  constructor() { }
+}
diff --git a/ini/projects/routing/src/app/dashboard/dashboard.component.ts b/ini/projects/routing/src/app/dashboard/dashboard.component.ts
new file mode 100644
index 0000000..4b53a05
--- /dev/null
+++ b/ini/projects/routing/src/app/dashboard/dashboard.component.ts
@@ -0,0 +1,16 @@
+import { Component, OnInit } from '@angular/core';
+
+@Component({
+  selector: 'app-dashboard',
+  template: `
+    <div>
+      <h1>Dashboard</h1>
+    </div>
+  `
+})
+
+export class DashboardComponent implements OnInit {
+  constructor() { }
+
+  ngOnInit() { }
+}
diff --git a/ini/projects/routing/src/app/dashboard/dashboard.module.ts b/ini/projects/routing/src/app/dashboard/dashboard.module.ts
new file mode 100644
index 0000000..28d92a8
--- /dev/null
+++ b/ini/projects/routing/src/app/dashboard/dashboard.module.ts
@@ -0,0 +1,18 @@
+import { NgModule } from '@angular/core';
+import { CommonModule } from '@angular/common';
+import { RouterModule, Routes } from '@angular/router';
+
+import { DashboardComponent } from './dashboard.component';
+
+const ROUTES: Routes = [
+  { path: '', component: DashboardComponent}
+];
+
+@NgModule({
+  imports: [
+    CommonModule,
+    RouterModule.forChild(ROUTES)
+  ],
+  declarations: [DashboardComponent],
+})
+export class DashboardModule { }
diff --git a/ini/projects/routing/src/app/mail/components/app/mail-app.component.scss b/ini/projects/routing/src/app/mail/components/app/mail-app.component.scss
new file mode 100644
index 0000000..2d555ba
--- /dev/null
+++ b/ini/projects/routing/src/app/mail/components/app/mail-app.component.scss
@@ -0,0 +1,32 @@
+:host {
+  display: flex;
+  width: 100%;
+}
+
+nav {
+  flex: 0 0 15%;
+  padding: 20px 0;
+  border-right: 1px solid rgba(0, 0, 0, 0.1);
+  a {
+    display: block;
+    margin-bottom: 10px;
+    padding: 10px 30px;
+    color: rgba(0, 0, 0, 0.5);
+    text-decoration: none;
+    font-size: 16px;
+    border-left: 3px solid transparent;
+    &.active {
+      color: rgba(0, 0, 0, 0.8);
+      border-left-color: #9f72e6;
+      background: rgba(0, 0, 0, 0.03);
+    }
+  }
+}
+
+.mail {
+  flex: 0 0 40%;
+  padding: 20px 0;
+  overflow: hidden;
+  border-right: 1px solid rgba(0, 0, 0, 0.1);
+  overflow-y: auto;
+}
diff --git a/ini/projects/routing/src/app/mail/components/app/mail-app.component.ts b/ini/projects/routing/src/app/mail/components/app/mail-app.component.ts
new file mode 100644
index 0000000..82782d0
--- /dev/null
+++ b/ini/projects/routing/src/app/mail/components/app/mail-app.component.ts
@@ -0,0 +1,17 @@
+import { Component, OnInit } from '@angular/core';
+
+@Component({
+  selector: 'app-mail',
+  styleUrls: ['mail-app.component.scss'],
+  template: `
+    <div class="mail">
+      <router-outlet></router-outlet>
+    </div>
+  `
+})
+
+export class MailAppComponent implements OnInit {
+  constructor() { }
+
+  ngOnInit() { }
+}
diff --git a/ini/projects/routing/src/app/mail/components/view/mail-view.component.scss b/ini/projects/routing/src/app/mail/components/view/mail-view.component.scss
index bcc0155..ec94495 100644
--- a/ini/projects/routing/src/app/mail/components/view/mail-view.component.scss
+++ b/ini/projects/routing/src/app/mail/components/view/mail-view.component.scss
@@ -1,6 +1,28 @@
 .mail-view {
   padding: 0 30px;
 }
+
+.mail-reply {
+  background: rgba(0, 0, 0, 0.05);
+  border-top: 1px solid rgba(0, 0, 0, 0.1);
+  padding: 30px 30px;
+  margin-bottom: -20px;
+  textarea {
+    width: 100%;
+    border: 1px solid rgba(0, 0, 0, 0.1);
+    resize: none;
+    padding: 10px 15px;
+    margin: 0 0 10px;
+    height: 100%;
+    outline: none;
+  }
+}
+
+button {
+  width: 100%;
+
+}
+
 h2 {
   font-size: 28px;
   font-weight: 400;
diff --git a/ini/projects/routing/src/app/mail/mail.module.ts b/ini/projects/routing/src/app/mail/mail.module.ts
index de17468..1132e13 100644
--- a/ini/projects/routing/src/app/mail/mail.module.ts
+++ b/ini/projects/routing/src/app/mail/mail.module.ts
@@ -2,25 +2,30 @@ import { NgModule } from '@angular/core';
 import { CommonModule } from '@angular/common';
 import { RouterModule, Routes } from '@angular/router';
 
+import { MailAppComponent } from './components/app/mail-app.component';
 import { MailFolderComponent } from './pages/folder/mail-folder.component';
 import { MailItemComponent } from './components/item/mail-item.component';
-import { HttpClientModule } from '@angular/common/http';
+import { MailViewComponent } from './components/view/mail-view.component';
+
 
 export const ROUTES: Routes = [
-  { path: 'folder/:name', component: MailFolderComponent }
+  { path: 'folder/:name', component: MailFolderComponent },
+  { path: '**', redirectTo: 'folder/inbox' }
 ];
 
 @NgModule({
   imports: [
     CommonModule,
     RouterModule.forChild(ROUTES),
-    HttpClientModule
   ],
   declarations: [
+    MailAppComponent,
     MailFolderComponent,
-    MailItemComponent
+    MailItemComponent,
+    MailViewComponent
   ],
   exports: [
+    MailAppComponent,
   ]
 })
 export class MailModule {}
diff --git a/ini/projects/services/.browserslistrc b/ini/projects/services/.browserslistrc
new file mode 100644
index 0000000..427441d
--- /dev/null
+++ b/ini/projects/services/.browserslistrc
@@ -0,0 +1,17 @@
+# This file is used by the build system to adjust CSS and JS output to support the specified browsers below.
+# For additional information regarding the format and rule options, please see:
+# https://github.com/browserslist/browserslist#queries
+
+# For the full list of supported browsers by the Angular framework, please see:
+# https://angular.io/guide/browser-support
+
+# You can see what browsers were selected by your queries by running:
+#   npx browserslist
+
+last 1 Chrome version
+last 1 Firefox version
+last 2 Edge major versions
+last 2 Safari major versions
+last 2 iOS major versions
+Firefox ESR
+not IE 11 # Angular supports IE 11 only as an opt-in. To opt-in, remove the 'not' prefix on this line.
diff --git a/ini/projects/services/e2e/protractor.conf.js b/ini/projects/services/e2e/protractor.conf.js
new file mode 100644
index 0000000..361e7f0
--- /dev/null
+++ b/ini/projects/services/e2e/protractor.conf.js
@@ -0,0 +1,37 @@
+// @ts-check
+// Protractor configuration file, see link for more information
+// https://github.com/angular/protractor/blob/master/lib/config.ts
+
+const { SpecReporter, StacktraceOption } = require('jasmine-spec-reporter');
+
+/**
+ * @type { import("protractor").Config }
+ */
+exports.config = {
+  allScriptsTimeout: 11000,
+  specs: [
+    './src/**/*.e2e-spec.ts'
+  ],
+  capabilities: {
+    browserName: 'chrome'
+  },
+  directConnect: true,
+  SELENIUM_PROMISE_MANAGER: false,
+  baseUrl: 'http://localhost:4200/',
+  framework: 'jasmine',
+  jasmineNodeOpts: {
+    showColors: true,
+    defaultTimeoutInterval: 30000,
+    print: function() {}
+  },
+  onPrepare() {
+    require('ts-node').register({
+      project: require('path').join(__dirname, './tsconfig.json')
+    });
+    jasmine.getEnv().addReporter(new SpecReporter({
+      spec: {
+        displayStacktrace: StacktraceOption.PRETTY
+      }
+    }));
+  }
+};
\ No newline at end of file
diff --git a/ini/projects/services/e2e/src/app.e2e-spec.ts b/ini/projects/services/e2e/src/app.e2e-spec.ts
new file mode 100644
index 0000000..8d14bc0
--- /dev/null
+++ b/ini/projects/services/e2e/src/app.e2e-spec.ts
@@ -0,0 +1,23 @@
+import { browser, logging } from 'protractor';
+import { AppPage } from './app.po';
+
+describe('workspace-project App', () => {
+  let page: AppPage;
+
+  beforeEach(() => {
+    page = new AppPage();
+  });
+
+  it('should display welcome message', async () => {
+    await page.navigateTo();
+    expect(await page.getTitleText()).toEqual('services app is running!');
+  });
+
+  afterEach(async () => {
+    // Assert that there are no errors emitted from the browser
+    const logs = await browser.manage().logs().get(logging.Type.BROWSER);
+    expect(logs).not.toContain(jasmine.objectContaining({
+      level: logging.Level.SEVERE,
+    } as logging.Entry));
+  });
+});
diff --git a/ini/projects/services/e2e/src/app.po.ts b/ini/projects/services/e2e/src/app.po.ts
new file mode 100644
index 0000000..c9c85ab
--- /dev/null
+++ b/ini/projects/services/e2e/src/app.po.ts
@@ -0,0 +1,11 @@
+import { browser, by, element } from 'protractor';
+
+export class AppPage {
+  async navigateTo(): Promise<unknown> {
+    return browser.get(browser.baseUrl);
+  }
+
+  async getTitleText(): Promise<string> {
+    return element(by.css('app-root .content span')).getText();
+  }
+}
diff --git a/ini/projects/services/e2e/tsconfig.json b/ini/projects/services/e2e/tsconfig.json
new file mode 100644
index 0000000..dacd5c3
--- /dev/null
+++ b/ini/projects/services/e2e/tsconfig.json
@@ -0,0 +1,13 @@
+/* To learn more about this file see: https://angular.io/config/tsconfig. */
+{
+  "extends": "../../../tsconfig.json",
+  "compilerOptions": {
+    "outDir": "../../../out-tsc/e2e",
+    "module": "commonjs",
+    "target": "es2018",
+    "types": [
+      "jasmine",
+      "node"
+    ]
+  }
+}
diff --git a/ini/projects/services/karma.conf.js b/ini/projects/services/karma.conf.js
new file mode 100644
index 0000000..9c44999
--- /dev/null
+++ b/ini/projects/services/karma.conf.js
@@ -0,0 +1,44 @@
+// Karma configuration file, see link for more information
+// https://karma-runner.github.io/1.0/config/configuration-file.html
+
+module.exports = function (config) {
+  config.set({
+    basePath: '',
+    frameworks: ['jasmine', '@angular-devkit/build-angular'],
+    plugins: [
+      require('karma-jasmine'),
+      require('karma-chrome-launcher'),
+      require('karma-jasmine-html-reporter'),
+      require('karma-coverage'),
+      require('@angular-devkit/build-angular/plugins/karma')
+    ],
+    client: {
+      jasmine: {
+        // you can add configuration options for Jasmine here
+        // the possible options are listed at https://jasmine.github.io/api/edge/Configuration.html
+        // for example, you can disable the random execution with `random: false`
+        // or set a specific seed with `seed: 4321`
+      },
+      clearContext: false // leave Jasmine Spec Runner output visible in browser
+    },
+    jasmineHtmlReporter: {
+      suppressAll: true // removes the duplicated traces
+    },
+    coverageReporter: {
+      dir: require('path').join(__dirname, '../../coverage/services'),
+      subdir: '.',
+      reporters: [
+        { type: 'html' },
+        { type: 'text-summary' }
+      ]
+    },
+    reporters: ['progress', 'kjhtml'],
+    port: 9876,
+    colors: true,
+    logLevel: config.LOG_INFO,
+    autoWatch: true,
+    browsers: ['Chrome'],
+    singleRun: false,
+    restartOnFileChange: true
+  });
+};
diff --git a/ini/projects/services/src/app/app-routing.module.ts b/ini/projects/services/src/app/app-routing.module.ts
new file mode 100644
index 0000000..0297262
--- /dev/null
+++ b/ini/projects/services/src/app/app-routing.module.ts
@@ -0,0 +1,10 @@
+import { NgModule } from '@angular/core';
+import { RouterModule, Routes } from '@angular/router';
+
+const routes: Routes = [];
+
+@NgModule({
+  imports: [RouterModule.forRoot(routes)],
+  exports: [RouterModule]
+})
+export class AppRoutingModule { }
diff --git a/ini/projects/services/src/app/app.component.spec.ts b/ini/projects/services/src/app/app.component.spec.ts
new file mode 100644
index 0000000..4b6d87f
--- /dev/null
+++ b/ini/projects/services/src/app/app.component.spec.ts
@@ -0,0 +1,35 @@
+import { TestBed } from '@angular/core/testing';
+import { RouterTestingModule } from '@angular/router/testing';
+import { AppComponent } from './app.component';
+
+describe('AppComponent', () => {
+  beforeEach(async () => {
+    await TestBed.configureTestingModule({
+      imports: [
+        RouterTestingModule
+      ],
+      declarations: [
+        AppComponent
+      ],
+    }).compileComponents();
+  });
+
+  it('should create the app', () => {
+    const fixture = TestBed.createComponent(AppComponent);
+    const app = fixture.componentInstance;
+    expect(app).toBeTruthy();
+  });
+
+  it(`should have as title 'services'`, () => {
+    const fixture = TestBed.createComponent(AppComponent);
+    const app = fixture.componentInstance;
+    expect(app.title).toEqual('services');
+  });
+
+  it('should render title', () => {
+    const fixture = TestBed.createComponent(AppComponent);
+    fixture.detectChanges();
+    const compiled = fixture.nativeElement;
+    expect(compiled.querySelector('.content span').textContent).toContain('services app is running!');
+  });
+});
diff --git a/ini/projects/services/src/app/app.component.ts b/ini/projects/services/src/app/app.component.ts
new file mode 100644
index 0000000..fd5e02d
--- /dev/null
+++ b/ini/projects/services/src/app/app.component.ts
@@ -0,0 +1,12 @@
+import { Component } from '@angular/core';
+
+@Component({
+  selector: 'app-root',
+  template: `
+    <app-food></app-food>
+  `,
+  styles: []
+})
+export class AppComponent {
+  title = 'services';
+}
diff --git a/ini/projects/services/src/app/app.module.ts b/ini/projects/services/src/app/app.module.ts
new file mode 100644
index 0000000..0580411
--- /dev/null
+++ b/ini/projects/services/src/app/app.module.ts
@@ -0,0 +1,23 @@
+import { NgModule } from '@angular/core';
+import { HttpClientModule } from '@angular/common/http';
+import { BrowserModule } from '@angular/platform-browser';
+
+import { AppRoutingModule } from './app-routing.module';
+import { AppComponent } from './app.component';
+import { FoodModule } from './food/food.module';
+
+@NgModule({
+  declarations: [
+    AppComponent
+  ],
+  imports: [
+    BrowserModule,
+    AppRoutingModule,
+    HttpClientModule,
+    FoodModule,
+    // StoreModule
+  ],
+  providers: [],
+  bootstrap: [AppComponent]
+})
+export class AppModule { }
diff --git a/ini/projects/services/src/app/food/components/food-drinks.component.ts b/ini/projects/services/src/app/food/components/food-drinks.component.ts
new file mode 100644
index 0000000..76a85d0
--- /dev/null
+++ b/ini/projects/services/src/app/food/components/food-drinks.component.ts
@@ -0,0 +1,24 @@
+import { Component, OnInit } from '@angular/core';
+import { Observable } from 'rxjs';
+import { Food, FoodService } from '../food.service';
+
+@Component({
+  selector: 'app-food-drinks',
+  template: `
+    <div>
+      <div *ngFor="let item of items$ | async">
+        {{ item.name }} {{ item.price | currency:'USD':true }}
+      </div>
+    </div>
+  `
+})
+
+export class FoodDrinksComponent implements OnInit {
+  items$: Observable<Food[]>;
+
+  constructor(private foodService: FoodService) { }
+
+  ngOnInit() {
+    this.items$ = this.foodService.getFood();
+  }
+}
diff --git a/ini/projects/services/src/app/food/components/food-pizzas.component.ts b/ini/projects/services/src/app/food/components/food-pizzas.component.ts
new file mode 100644
index 0000000..edaffa6
--- /dev/null
+++ b/ini/projects/services/src/app/food/components/food-pizzas.component.ts
@@ -0,0 +1,24 @@
+import { Component, OnInit } from '@angular/core';
+import { Observable } from 'rxjs';
+import { Food, FoodService } from '../food.service';
+
+@Component({
+  selector: 'app-food-pizzas',
+  template: `
+    <div>
+      <div *ngFor="let item of items$ | async">
+        {{ item.name }} {{ item.price | currency:'USD':true }}
+      </div>
+    </div>
+  `
+})
+
+export class FoodPizzasComponent implements OnInit {
+  items$: Observable<Food[]>;
+
+  constructor(private foodService: FoodService) { }
+
+  ngOnInit() {
+    this.items$ = this.foodService.getFood();
+  }
+}
diff --git a/ini/projects/services/src/app/food/components/food-sides.component.ts b/ini/projects/services/src/app/food/components/food-sides.component.ts
new file mode 100644
index 0000000..cee92fa
--- /dev/null
+++ b/ini/projects/services/src/app/food/components/food-sides.component.ts
@@ -0,0 +1,24 @@
+import { Component, OnInit } from '@angular/core';
+import { Observable } from 'rxjs';
+import { Food, FoodService } from '../food.service';
+
+@Component({
+  selector: 'app-food-sides',
+  template: `
+    <div>
+      <div *ngFor="let item of items$ | async">
+        {{ item.name }} {{ item.price | currency:'USD':true }}
+      </div>
+    </div>
+  `
+})
+
+export class FoodSidesComponent implements OnInit {
+  items$: Observable<Food[]>;
+
+  constructor(private foodService: FoodService) { }
+
+  ngOnInit() {
+    this.items$ = this.foodService.getFood();
+  }
+}
diff --git a/ini/projects/services/src/app/food/food.component.ts b/ini/projects/services/src/app/food/food.component.ts
new file mode 100644
index 0000000..b0b5277
--- /dev/null
+++ b/ini/projects/services/src/app/food/food.component.ts
@@ -0,0 +1,27 @@
+import { Component, OnInit } from '@angular/core';
+
+@Component({
+  selector: 'app-food',
+  styles: [`
+    app-food-pizzas,
+    app-food-sides,
+    app-food-drinks {
+      display: block;
+      border-bottom: 2px solid #eee;
+      padding: 20px 0;
+    }
+  `],
+  template: `
+    <div>
+      <app-food-pizzas></app-food-pizzas>
+      <app-food-sides></app-food-sides>
+      <app-food-drinks></app-food-drinks>
+    </div>
+  `
+})
+
+export class FoodComponent implements OnInit {
+  constructor() { }
+
+  ngOnInit() { }
+}
diff --git a/ini/projects/services/src/app/food/food.module.ts b/ini/projects/services/src/app/food/food.module.ts
new file mode 100644
index 0000000..e4a42b4
--- /dev/null
+++ b/ini/projects/services/src/app/food/food.module.ts
@@ -0,0 +1,24 @@
+import { CommonModule } from '@angular/common';
+import { NgModule } from '@angular/core';
+import { FoodDrinksComponent } from './components/food-drinks.component';
+import { FoodPizzasComponent } from './components/food-pizzas.component';
+import { FoodSidesComponent } from './components/food-sides.component';
+
+import { FoodComponent } from './food.component';
+
+@NgModule({
+  imports: [
+    CommonModule
+  ],
+  declarations: [
+    FoodComponent,
+    FoodPizzasComponent,
+    FoodSidesComponent,
+    FoodDrinksComponent,
+  ],
+  exports: [
+    FoodComponent
+  ],
+  providers: [],
+})
+export class FoodModule { }
diff --git a/ini/projects/services/src/app/food/food.service.ts b/ini/projects/services/src/app/food/food.service.ts
new file mode 100644
index 0000000..a00d7dc
--- /dev/null
+++ b/ini/projects/services/src/app/food/food.service.ts
@@ -0,0 +1,22 @@
+import { HttpClient } from '@angular/common/http';
+import { Inject, Injectable } from '@angular/core';
+import { Observable } from 'rxjs';
+
+export interface Food {
+  name: string,
+  price: number
+}
+
+@Injectable({providedIn: 'root'})
+export class FoodService {
+  api = '/api/pizzas';
+
+  constructor(
+    private http: HttpClient
+  ) { }
+
+  getFood(): Observable<Food[]> {
+    return this.http.get<Food[]>(this.api);
+  }
+
+}
diff --git a/ini/projects/services/src/app/store/store.component.ts b/ini/projects/services/src/app/store/store.component.ts
new file mode 100644
index 0000000..828abe6
--- /dev/null
+++ b/ini/projects/services/src/app/store/store.component.ts
@@ -0,0 +1,23 @@
+import { Component, OnInit } from '@angular/core';
+import { StoreService } from './store.service';
+
+@Component({
+  selector: 'app-store',
+  template: `
+    <div>
+      <ul>
+        <li *ngFor="let item of (products | async)">
+          #{{ item.id }} - {{ item.name }}
+        </li>
+      </ul>
+    </div>
+  `
+})
+
+export class StoreComponent implements OnInit {
+  products = this.service.getProducts();
+
+  constructor(private service: StoreService) { }
+
+  ngOnInit() { }
+}
diff --git a/ini/projects/services/src/app/store/store.config.ts b/ini/projects/services/src/app/store/store.config.ts
new file mode 100644
index 0000000..f06d3b1
--- /dev/null
+++ b/ini/projects/services/src/app/store/store.config.ts
@@ -0,0 +1,8 @@
+import { InjectionToken } from '@angular/core';
+
+export interface StoreConfig {
+  storeId: number,
+  storeToken: string
+}
+
+export const STORE_CONFIG = new InjectionToken<StoreConfig>('STORE_CONFIG');
diff --git a/ini/projects/services/src/app/store/store.module.ts b/ini/projects/services/src/app/store/store.module.ts
new file mode 100644
index 0000000..9a21056
--- /dev/null
+++ b/ini/projects/services/src/app/store/store.module.ts
@@ -0,0 +1,24 @@
+import { NgModule } from '@angular/core';
+import { CommonModule } from '@angular/common';
+
+import { StoreComponent } from './store.component';
+import { STORE_CONFIG } from './store.config';
+
+@NgModule({
+  declarations: [
+    StoreComponent
+  ],
+  imports: [
+    CommonModule
+  ],
+  exports: [
+    StoreComponent
+  ],
+  providers: [
+    {
+      provide: STORE_CONFIG,
+      useValue: { storeId: 10000, storeToken: 'AF02-0124-5565-1234'}
+    }
+  ],
+})
+export class StoreModule { }
diff --git a/ini/projects/services/src/app/store/store.service.ts b/ini/projects/services/src/app/store/store.service.ts
new file mode 100644
index 0000000..2b86e13
--- /dev/null
+++ b/ini/projects/services/src/app/store/store.service.ts
@@ -0,0 +1,24 @@
+import { Inject, Injectable } from '@angular/core';
+import { HttpClient, HttpHeaders } from '@angular/common/http';
+
+import { StoreConfig, STORE_CONFIG } from './store.config';
+
+@Injectable({providedIn: 'root'})
+export class StoreService {
+  constructor(
+    private http: HttpClient,
+    @Inject(STORE_CONFIG) private config: StoreConfig
+  ) { }
+
+  getProducts() {
+    const options = {
+      headers: new HttpHeaders({
+        'store-id': this.config.storeId.toString(),
+        'store-token': this.config.storeToken
+      })
+    };
+
+    return this.http.get(`/api/products`, options);
+  }
+
+}
diff --git a/ini/projects/services/src/assets/.gitkeep b/ini/projects/services/src/assets/.gitkeep
new file mode 100644
index 0000000..e69de29
diff --git a/ini/projects/services/src/environments/environment.prod.ts b/ini/projects/services/src/environments/environment.prod.ts
new file mode 100644
index 0000000..3612073
--- /dev/null
+++ b/ini/projects/services/src/environments/environment.prod.ts
@@ -0,0 +1,3 @@
+export const environment = {
+  production: true
+};
diff --git a/ini/projects/services/src/environments/environment.ts b/ini/projects/services/src/environments/environment.ts
new file mode 100644
index 0000000..7b4f817
--- /dev/null
+++ b/ini/projects/services/src/environments/environment.ts
@@ -0,0 +1,16 @@
+// This file can be replaced during build by using the `fileReplacements` array.
+// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.
+// The list of file replacements can be found in `angular.json`.
+
+export const environment = {
+  production: false
+};
+
+/*
+ * For easier debugging in development mode, you can import the following file
+ * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.
+ *
+ * This import should be commented out in production mode because it will have a negative impact
+ * on performance if an error is thrown.
+ */
+// import 'zone.js/dist/zone-error';  // Included with Angular CLI.
diff --git a/ini/projects/services/src/favicon.ico b/ini/projects/services/src/favicon.ico
new file mode 100644
index 0000000..997406a
Binary files /dev/null and b/ini/projects/services/src/favicon.ico differ
diff --git a/ini/projects/services/src/index.html b/ini/projects/services/src/index.html
new file mode 100644
index 0000000..7645a83
--- /dev/null
+++ b/ini/projects/services/src/index.html
@@ -0,0 +1,13 @@
+<!doctype html>
+<html lang="en">
+<head>
+  <meta charset="utf-8">
+  <title>Services</title>
+  <base href="/">
+  <meta name="viewport" content="width=device-width, initial-scale=1">
+  <link rel="icon" type="image/x-icon" href="favicon.ico">
+</head>
+<body>
+  <app-root></app-root>
+</body>
+</html>
diff --git a/ini/projects/services/src/main.ts b/ini/projects/services/src/main.ts
new file mode 100644
index 0000000..c7b673c
--- /dev/null
+++ b/ini/projects/services/src/main.ts
@@ -0,0 +1,12 @@
+import { enableProdMode } from '@angular/core';
+import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';
+
+import { AppModule } from './app/app.module';
+import { environment } from './environments/environment';
+
+if (environment.production) {
+  enableProdMode();
+}
+
+platformBrowserDynamic().bootstrapModule(AppModule)
+  .catch(err => console.error(err));
diff --git a/ini/projects/services/src/polyfills.ts b/ini/projects/services/src/polyfills.ts
new file mode 100644
index 0000000..d5f67bd
--- /dev/null
+++ b/ini/projects/services/src/polyfills.ts
@@ -0,0 +1,65 @@
+/**
+ * This file includes polyfills needed by Angular and is loaded before the app.
+ * You can add your own extra polyfills to this file.
+ *
+ * This file is divided into 2 sections:
+ *   1. Browser polyfills. These are applied before loading ZoneJS and are sorted by browsers.
+ *   2. Application imports. Files imported after ZoneJS that should be loaded before your main
+ *      file.
+ *
+ * The current setup is for so-called "evergreen" browsers; the last versions of browsers that
+ * automatically update themselves. This includes Safari >= 10, Chrome >= 55 (including Opera),
+ * Edge >= 13 on the desktop, and iOS 10 and Chrome on mobile.
+ *
+ * Learn more in https://angular.io/guide/browser-support
+ */
+
+/***************************************************************************************************
+ * BROWSER POLYFILLS
+ */
+
+/**
+ * IE11 requires the following for NgClass support on SVG elements
+ */
+// import 'classlist.js';  // Run `npm install --save classlist.js`.
+
+/**
+ * Web Animations `@angular/platform-browser/animations`
+ * Only required if AnimationBuilder is used within the application and using IE/Edge or Safari.
+ * Standard animation support in Angular DOES NOT require any polyfills (as of Angular 6.0).
+ */
+// import 'web-animations-js';  // Run `npm install --save web-animations-js`.
+
+/**
+ * By default, zone.js will patch all possible macroTask and DomEvents
+ * user can disable parts of macroTask/DomEvents patch by setting following flags
+ * because those flags need to be set before `zone.js` being loaded, and webpack
+ * will put import in the top of bundle, so user need to create a separate file
+ * in this directory (for example: zone-flags.ts), and put the following flags
+ * into that file, and then add the following code before importing zone.js.
+ * import './zone-flags';
+ *
+ * The flags allowed in zone-flags.ts are listed here.
+ *
+ * The following flags will work for all browsers.
+ *
+ * (window as any).__Zone_disable_requestAnimationFrame = true; // disable patch requestAnimationFrame
+ * (window as any).__Zone_disable_on_property = true; // disable patch onProperty such as onclick
+ * (window as any).__zone_symbol__UNPATCHED_EVENTS = ['scroll', 'mousemove']; // disable patch specified eventNames
+ *
+ *  in IE/Edge developer tools, the addEventListener will also be wrapped by zone.js
+ *  with the following flag, it will bypass `zone.js` patch for IE/Edge
+ *
+ *  (window as any).__Zone_enable_cross_context_check = true;
+ *
+ */
+
+/***************************************************************************************************
+ * Zone JS is required by default for Angular itself.
+ */
+import 'zone.js/dist/zone';  // Included with Angular CLI.
+
+
+/***************************************************************************************************
+ * APPLICATION IMPORTS
+ */
diff --git a/ini/projects/services/src/styles.scss b/ini/projects/services/src/styles.scss
new file mode 100644
index 0000000..0d2a717
--- /dev/null
+++ b/ini/projects/services/src/styles.scss
@@ -0,0 +1,124 @@
+/* You can add global styles to this file, and also import other style files */
+
+* {
+  box-sizing: border-box;
+  -webkit-box-sizing: border-box;
+  -moz-box-sizing: border-box;
+  font: 300 15px/1.4 -apple-system,BlinkMacSystemFont,"Segoe UI",Helvetica,Arial,sans-serif,"Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol";
+}
+
+html, body {
+  height: 100%;
+  margin: 0;
+  padding: 0;
+  background: #fff;
+  -webkit-font-smoothing: antialiased;
+  color: #545e6f;
+}
+
+img {
+  vertical-align: bottom;
+}
+img a {
+  border: 0;
+}
+ul,
+ol {
+  list-style: none;
+  margin: 0;
+  padding: 0;
+}
+a {
+  color: #9f72e6;
+  text-decoration: none;
+}
+input,
+button {
+  outline: 0;
+}
+input[type=text],
+input[type=email],
+input[type=number],
+input[type=password] {
+  border: none;
+  background: #fff;
+  font-size: 13px;
+  padding: 6px 30px 6px 10px;
+  border-radius: 1px;
+  border: 1px solid #ccc;
+}
+label {
+  display: block;
+}
+button {
+  background: #9B5FC6;
+  cursor: pointer;
+  border: 0;
+  border-radius: 3px;
+  padding: 5px 10px;
+  text-align: center;
+  color: #fff;
+}
+button:disabled {
+  cursor: not-allowed;
+  background: #b598e4;
+}
+p {
+  margin: 5px 0;
+}
+
+body {
+  padding: 10px;
+}
+
+h3 {
+  font-size: 22px;
+  font-weight: 400;
+  margin: 0;
+}
+h4 {
+  font-size: 18px;
+  font-weight: 300;
+  margin: 0;
+}
+input[type="text"] {
+  display: block;
+  border: none;
+  background: #fff;
+  font-size: 15px;
+  padding: 6px 30px 6px 10px;
+  border-radius: 1px;
+  border: 1px solid #ccc;
+  margin-top: 10px;
+  width: 100%;
+}
+label {
+  margin-bottom: 20px;
+}
+h3 {
+  margin-bottom: 20px;
+}
+app-root {
+  width: 500px;
+  margin: 0 auto;
+  display: block;
+}
+select {
+  -webkit-appearance: none;
+  text-indent: .01px;
+  text-overflow: '';
+  overflow: hidden;
+  font-family: inherit;
+  font-size: 14px;
+  padding: 10px 50px 10px 15px;
+  border-radius: 0;
+  color: rgba(0, 0, 0, 0.7);
+  border: 1px solid rgba(0, 0, 0, 0.1);
+  outline: none;
+  background:
+    linear-gradient(45deg, transparent 50%, rgba(0, 0, 0, 0.7) 50%)
+    no-repeat calc(100% - 20px) calc(1em + 4px),
+    linear-gradient(135deg, rgba(0, 0, 0, 0.7) 50%, transparent 50%)
+    no-repeat calc(100% - 15px) calc(1em + 4px);
+  background-size: 5px 5px, 5px 5px;
+}
diff --git a/ini/projects/services/src/test.ts b/ini/projects/services/src/test.ts
new file mode 100644
index 0000000..50193eb
--- /dev/null
+++ b/ini/projects/services/src/test.ts
@@ -0,0 +1,25 @@
+// This file is required by karma.conf.js and loads recursively all the .spec and framework files
+
+import 'zone.js/dist/zone-testing';
+import { getTestBed } from '@angular/core/testing';
+import {
+  BrowserDynamicTestingModule,
+  platformBrowserDynamicTesting
+} from '@angular/platform-browser-dynamic/testing';
+
+declare const require: {
+  context(path: string, deep?: boolean, filter?: RegExp): {
+    keys(): string[];
+    <T>(id: string): T;
+  };
+};
+
+// First, initialize the Angular testing environment.
+getTestBed().initTestEnvironment(
+  BrowserDynamicTestingModule,
+  platformBrowserDynamicTesting()
+);
+// Then we find all the tests.
+const context = require.context('./', true, /\.spec\.ts$/);
+// And load the modules.
+context.keys().map(context);
diff --git a/ini/projects/services/tsconfig.app.json b/ini/projects/services/tsconfig.app.json
new file mode 100644
index 0000000..fd37f74
--- /dev/null
+++ b/ini/projects/services/tsconfig.app.json
@@ -0,0 +1,15 @@
+/* To learn more about this file see: https://angular.io/config/tsconfig. */
+{
+  "extends": "../../tsconfig.json",
+  "compilerOptions": {
+    "outDir": "../../out-tsc/app",
+    "types": []
+  },
+  "files": [
+    "src/main.ts",
+    "src/polyfills.ts"
+  ],
+  "include": [
+    "src/**/*.d.ts"
+  ]
+}
diff --git a/ini/projects/services/tsconfig.spec.json b/ini/projects/services/tsconfig.spec.json
new file mode 100644
index 0000000..b66a2f0
--- /dev/null
+++ b/ini/projects/services/tsconfig.spec.json
@@ -0,0 +1,18 @@
+/* To learn more about this file see: https://angular.io/config/tsconfig. */
+{
+  "extends": "../../tsconfig.json",
+  "compilerOptions": {
+    "outDir": "../../out-tsc/spec",
+    "types": [
+      "jasmine"
+    ]
+  },
+  "files": [
+    "src/test.ts",
+    "src/polyfills.ts"
+  ],
+  "include": [
+    "src/**/*.spec.ts",
+    "src/**/*.d.ts"
+  ]
+}
diff --git a/ini/projects/services/tslint.json b/ini/projects/services/tslint.json
new file mode 100644
index 0000000..19e8161
--- /dev/null
+++ b/ini/projects/services/tslint.json
@@ -0,0 +1,17 @@
+{
+  "extends": "../../tslint.json",
+  "rules": {
+    "directive-selector": [
+      true,
+      "attribute",
+      "app",
+      "camelCase"
+    ],
+    "component-selector": [
+      true,
+      "element",
+      "app",
+      "kebab-case"
+    ]
+  }
+}
